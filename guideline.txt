[1] Create Server an Public Folder, under the Server folder we are going to save the Frontend files like index.html and under the Server folder we are going to save the backend code.

[2] We will need to use the path libary because since the server.js is not in the root folder, it gets a little bit tricky to specify the routes, so we will use the path library, and being specific the join method.

    without path library: /home/christian/Projects/node-advanced/node-chat-app/server/../public
    with path library: /home/christian/Projects/node-advanced/node-chat-app/public

[3] Then lets install express:
    npm i express@4.16.3 --save

[4] Configuring basic Setup
    First step: load express in a constant called express:  
        
        const express = require('express');

    Second step: Make a variable called app and set it equal to a call to express: 
        
        var app = express();

    Tercer step: To configure Express, we call methods on app to create routes, add middleware or start up the server.
                 So we'll first call app.use to configure our Express static middleware. This will serve up that public folder,
                 So we need to call express static and pass in the public Path variable which stores the path we need:

                    app.use(express.static(publicPath));

                Then we need to call app.listen to start up the server in the port 3000:
                
                    app.listen(3000, () => {
                        console.log('Server is up on port 3000');
                    });

[5] Setup a gitignore file

    So lets create a file called .gitignore and we'll write node_modules there, since we don't want to commit that folder.

[6] Configure Variables for Heroku

    We have to use the proccess.env.PORT environment variable:

        const port = process.env.PORT || 3000;

    So by this way the port will be configured for locally and Heroku environmnets.

[7] Add scripts in the package.json

        "start": "node server/server.js"

    Also we have to specify the "engines" property:

    "engines": {
        "node": "9.3.0"
    }

[8] Lets make our first commit, also create the Heroku app and uplaod the code, for achieve this, we need to run the following commands:

    heroku create
    heroku push origin master

    the output: https://agile-springs-52465.herokuapp.com

    And there we can see our application tunning on Heroku

[9] Adding Socket.io to an app

    Now that we have a basic express app up and running we are going to configure it to allow incoming websockets connections. This means the server will be able toa ccept connections and well be setting up the client to make the connections. Then, well have a persistent connection ans we can send data back and forth, whether its data from the server tyo the client, r data from the client to the server. In order to ser up th WebSockets, we'll be using a library called Socket.io.

[10] Setting up socket.io:

    npm i socket.io@2.0.4 --save

    Once the installation is completed, we will require the socketio in the server file:

        const socketIO = require('socket.io');1

    Now, lets integrate the library

[11] Creating a server using the http library:

    - First will need to load the http module:

        const http = require('http');

    Then lets create the server using the http library:

        var server = http.createServer(app);

    The next thing we'll do is configure the server to use Socket.io

        var io = socketIO(server);

    This returns our WebSockets server, on here, we can do anything we want in terms of emitting or listenning to events.
    What we'll do now in order to make a connection is to add a script tag in our client HTML file called index.html

        <script src="/socket.io/socket.io.js"></script>

    this path is relative to our server, by adding this, we are laoding the socket.io library into the client. Then we will need another script tag, but instead of loading an external file, we'll be writing our code:

        <script>
            var socket = io();
        </script>

    This creates our connection and stores the socket in a variable. We can go to Chrome/developer tools/ netwrok and inspect a little bit. The network panel keeps track of all of the requests made by our webpage. We can refresh the page in order to see the list of resources requested.

[12] Communication between the client and the server:

    Now, communication can be anything, in this case it comes in a form of an event. Events can be emmited from both the server and the client. and also both of them can be listening for events.
    So lets take a look into the built on methods/events, so lets add the following code in the server.js file:

        io.on()

    This emthod lets us register an event listener, so we can listen for an specific event and do something when that event happens. On built-in event that we are going to use is the connection, this lets us to listen for a new connection and lets us do something when the connection comes in via a callback function:

        io.on('connection', (socket) => {
            console.log('New user  connected');
        });

    **We need to understand something about sockets, WebSockets as we already mentioned, are a persisten technology, meaning that the client and server both keep the communication channel open for as long as either of them want to. If the server shuts down, the client doesnt really have a choice, and vice versa. If I close a browser tab, the server cannot force me to keep the connection open.

[13] Adding a connection event in the client

    In the index.html file we can add an event:

        socket.on('connect', () => {
            console.log('Connected to server');
        });

[13] The disconnect event:

    The disconnect event lets us do something in both, client and server when the connection drops. We'll add and event lister in the client and we'll do the same thing into the server:

        socket.on('disconnect', () => {
            console.log('Disconnected from the server');
        });

        also we can try the 

        socket.on('disconnect', () => {
            console.log("Disconnected from the server");
        });

        and this 2 events are both in the Server and in the client, it's important to mention that in the Server side, the disconnect method it's applied to the sockets inside the io.on(connect) method callback.

[14] Emitting and listening to custom events:

    First lets move the javascript code of the client side to a separate file, and in order to make this to work on any platform we'll need to remove the arrow functions and use regular functions instead.

    there are 2 custom events that we want to create:
    1.- newEmail (Server ->  Client)
    2.- createNewEmail(client -> Browser)

    As we  have been doing we, will be using the socket.on('newEmail') to specify what do we want to do, when we recieve that event, for now let's create the first one, and type into the index.js file the docket.on method and in the callback function let's just log "New email recieved".

    Then we will need to use the emit method on the server, applied to the socket variable, the first parameter is the name of the event, which in this case will be the same name that we specified in the index.js file fot the client: "newEmail", we can also pass as the second argument the data that we are interested on passed on:

        socket.emit('newEmail', {
            from: 'mike@example.com',
            text: 'Whats app man',
            createdAt: 123
        });

        Then on the client side, the data that we passed it will be stored in the first parameter of our callback function, so, we can manipulate the data.

        After this we are going to create the newMessage event from the server to the client, so we need to implement the event listener on the client, and the event emitter on the backend.

[15] Broadcasting events

    Now that we have our custom event listeners and emitter in place, its time to actually wire up the message system, so when on user sends a message to the server, it actually gets sent to evert connected user. If I have two tabs open and I emit a createMessage event from one tab, I should see the message arrive in the second one.

    
    








